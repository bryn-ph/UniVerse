/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/users/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all users (optionally filtered by university or search query) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserBase"][];
                    };
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        put?: never;
        /** Create a new user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UserCreate"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserBase"];
                    };
                };
                422: components["responses"]["UNPROCESSABLE_CONTENT"];
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: string;
            };
            cookie?: never;
        };
        /** Get a single user */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    user_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserBase"];
                    };
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        /** Update user details */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    user_id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UserUpdate"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserBase"];
                    };
                };
                422: components["responses"]["UNPROCESSABLE_CONTENT"];
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        post?: never;
        /** Delete a user */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    user_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Simple login endpoint */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UserLogin"];
                };
            };
            responses: {
                422: components["responses"]["UNPROCESSABLE_CONTENT"];
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/universities/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all universities */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["University"][];
                    };
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        put?: never;
        /** Create a new university */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["University"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["University"];
                    };
                };
                422: components["responses"]["UNPROCESSABLE_CONTENT"];
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/universities/{university_id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                university_id: string;
            };
            cookie?: never;
        };
        /** Get a university by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    university_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["University"];
                    };
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        /** Update a university */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    university_id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["University"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["University"];
                    };
                };
                422: components["responses"]["UNPROCESSABLE_CONTENT"];
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        post?: never;
        /** Delete a university */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    university_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/discussions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all discussions (optionally filtered by class or university) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Discussion"][];
                    };
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        put?: never;
        /** Create a new discussion */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Discussion"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Discussion"];
                    };
                };
                422: components["responses"]["UNPROCESSABLE_CONTENT"];
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/discussions/{discussion_id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                discussion_id: string;
            };
            cookie?: never;
        };
        /** Get a discussion by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    discussion_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Discussion"];
                    };
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/discussions/{discussion_id}/replies": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                discussion_id: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** (Handled in reply routes; left for structure) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    discussion_id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Discussion"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Discussion"];
                    };
                };
                422: components["responses"]["UNPROCESSABLE_CONTENT"];
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/replies/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all replies (optionally filtered by discussion_id or user_id) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Reply"][];
                    };
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        put?: never;
        /** Create a new reply */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Reply"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Reply"];
                    };
                };
                422: components["responses"]["UNPROCESSABLE_CONTENT"];
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/replies/{reply_id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reply_id: string;
            };
            cookie?: never;
        };
        get?: never;
        /** Update reply body */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    reply_id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Reply1"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Reply"];
                    };
                };
                422: components["responses"]["UNPROCESSABLE_CONTENT"];
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        post?: never;
        /** Delete a reply */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    reply_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Error: {
            /** @description Error code */
            code?: number;
            /** @description Error name */
            status?: string;
            /** @description Error message */
            message?: string;
            /** @description Errors */
            errors?: {
                [key: string]: unknown;
            };
        };
        PaginationMetadata: {
            total?: number;
            total_pages?: number;
            first_page?: number;
            last_page?: number;
            page?: number;
            previous_page?: number;
            next_page?: number;
        };
        UserBase: {
            /** Format: uuid */
            readonly id?: string;
            name: string;
            /** Format: email */
            email: string;
            /** Format: date-time */
            readonly created_at?: string;
            /** Format: uuid */
            university_id?: string;
            readonly university?: string;
        };
        UserCreate: {
            name: string;
            /** Format: email */
            email: string;
            password: string;
            /** Format: uuid */
            university_id: string;
        };
        UserUpdate: {
            name?: string;
            password?: string;
        };
        UserLogin: {
            /** Format: email */
            email: string;
            password: string;
        };
        ClassMini: {
            /** Format: uuid */
            id?: string;
            name?: string;
        };
        University: {
            /** Format: uuid */
            readonly id?: string;
            name: string;
            readonly users?: components["schemas"]["UserBase"][];
            readonly classes?: components["schemas"]["ClassMini"][];
            readonly user_count?: unknown;
            readonly class_count?: unknown;
        };
        Reply: {
            /** Format: uuid */
            readonly id?: string;
            body: string;
            /** Format: date-time */
            readonly created_at?: string;
            /** Format: uuid */
            discussion_id: string;
            /** Format: uuid */
            user_id: string;
            readonly author?: string;
            readonly discussion_title?: string;
        };
        Discussion: {
            /** Format: uuid */
            readonly id?: string;
            title: string;
            body: string;
            /** Format: date-time */
            readonly created_at?: string;
            /** Format: uuid */
            user_id: string;
            /** Format: uuid */
            class_id: string;
            readonly author?: string;
            readonly class_name?: string;
            readonly university?: string;
            readonly replies?: components["schemas"]["Reply"][];
            readonly reply_count?: unknown;
        };
        Reply1: {
            /** Format: uuid */
            readonly id?: string;
            body?: string;
            /** Format: date-time */
            readonly created_at?: string;
            /** Format: uuid */
            discussion_id?: string;
            /** Format: uuid */
            user_id?: string;
            readonly author?: string;
            readonly discussion_title?: string;
        };
    };
    responses: {
        /** @description Default error response */
        DEFAULT_ERROR: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Unprocessable Content */
        UNPROCESSABLE_CONTENT: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
