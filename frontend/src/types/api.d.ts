/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/users/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all users (optionally filtered by university or search query) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserBase"][];
                    };
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        put?: never;
        /** Create a new user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UserCreate"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserBase"];
                    };
                };
                422: components["responses"]["UNPROCESSABLE_CONTENT"];
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: string;
            };
            cookie?: never;
        };
        /** Get a single user */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    user_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserBase"];
                    };
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        /** Update user details */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    user_id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UserUpdate"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserBase"];
                    };
                };
                422: components["responses"]["UNPROCESSABLE_CONTENT"];
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        post?: never;
        /** Delete a user */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    user_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Simple login endpoint */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UserLogin"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                422: components["responses"]["UNPROCESSABLE_CONTENT"];
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{user_id}/classes": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: string;
            };
            cookie?: never;
        };
        /** Get all classes user is enrolled in */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    user_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Class"][];
                    };
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        /** Bulk update user's enrolled classes */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    user_id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UserEnrollBulk"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Class"][];
                    };
                };
                422: components["responses"]["UNPROCESSABLE_CONTENT"];
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        /** Enroll user in a class */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    user_id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UserEnroll"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Class"];
                    };
                };
                422: components["responses"]["UNPROCESSABLE_CONTENT"];
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{user_id}/classes/{class_id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: string;
                class_id: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Unenroll user from a class */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    user_id: string;
                    class_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/universities/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all universities */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["University"][];
                    };
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        put?: never;
        /** Create a new university */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UniversityCreate"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["University"];
                    };
                };
                422: components["responses"]["UNPROCESSABLE_CONTENT"];
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/universities/{university_id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                university_id: string;
            };
            cookie?: never;
        };
        /** Get a university by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    university_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["University"];
                    };
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        /** Update a university */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    university_id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UniversityUpdate"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["University"];
                    };
                };
                422: components["responses"]["UNPROCESSABLE_CONTENT"];
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        post?: never;
        /** Delete a university */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    university_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/discussions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all discussions (optionally filtered by class, university, or user) */
        get: {
            parameters: {
                query?: {
                    class_id?: string;
                    university_id?: string;
                    user_id?: string;
                    q?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Discussion"][];
                    };
                };
                422: components["responses"]["UNPROCESSABLE_CONTENT"];
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        put?: never;
        /** Create a new discussion */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["DiscussionCreate"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Discussion"];
                    };
                };
                422: components["responses"]["UNPROCESSABLE_CONTENT"];
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/discussions/{discussion_id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                discussion_id: string;
            };
            cookie?: never;
        };
        /** Get a discussion by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    discussion_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Discussion"];
                    };
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/discussions/{discussion_id}/replies": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                discussion_id: string;
            };
            cookie?: never;
        };
        /** Get replies for a discussion (redirect to /api/replies?discussion_id=<id>) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    discussion_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/replies/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all replies (optionally filtered by discussion_id or user_id) */
        get: {
            parameters: {
                query?: {
                    discussion_id?: string;
                    user_id?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Reply"][];
                    };
                };
                422: components["responses"]["UNPROCESSABLE_CONTENT"];
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        put?: never;
        /** Create a new reply */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ReplyCreate"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Reply"];
                    };
                };
                422: components["responses"]["UNPROCESSABLE_CONTENT"];
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/replies/{reply_id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reply_id: string;
            };
            cookie?: never;
        };
        get?: never;
        /** Update reply body */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    reply_id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ReplyUpdate"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Reply"];
                    };
                };
                422: components["responses"]["UNPROCESSABLE_CONTENT"];
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        post?: never;
        /** Delete a reply */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    reply_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/classes/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all classes (optionally filtered by university or tag) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Class"][];
                    };
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        put?: never;
        /** Create a new class */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ClassCreate"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Class"];
                    };
                };
                422: components["responses"]["UNPROCESSABLE_CONTENT"];
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/classes/{class_id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                class_id: string;
            };
            cookie?: never;
        };
        /** Get details of a single class */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    class_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Class"];
                    };
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        /** Update class name or tags */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    class_id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ClassUpdate"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Class"];
                    };
                };
                422: components["responses"]["UNPROCESSABLE_CONTENT"];
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        post?: never;
        /** Delete a class */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    class_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tags/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all tags with optional filtering and statistics */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Tag"][];
                    };
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        put?: never;
        /** Create a new tag */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["TagCreate"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Tag"];
                    };
                };
                422: components["responses"]["UNPROCESSABLE_CONTENT"];
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tags/{tag_id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tag_id: string;
            };
            cookie?: never;
        };
        /** Get a specific tag with all its associated classes */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    tag_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Tag"];
                    };
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        /** Update a tag's name */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    tag_id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["TagUpdate"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Tag"];
                    };
                };
                422: components["responses"]["UNPROCESSABLE_CONTENT"];
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        post?: never;
        /** Delete a tag (this will also remove it from all associated classes) */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    tag_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tags/{tag_id}/classes": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tag_id: string;
            };
            cookie?: never;
        };
        /** Get all classes associated with a specific tag */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    tag_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tags/popular": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get most popular tags by usage count */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tags/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get overall tag statistics */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/class-groups/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all class groups */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ClassGroup"][];
                    };
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        put?: never;
        /** Create a new class group */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ClassGroupCreate"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ClassGroup"];
                    };
                };
                422: components["responses"]["UNPROCESSABLE_CONTENT"];
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/class-groups/{group_id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                group_id: string;
            };
            cookie?: never;
        };
        /** Get a class group with all its classes */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    group_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ClassGroup"];
                    };
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        /** Update a class group */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    group_id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ClassGroupUpdate"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ClassGroup"];
                    };
                };
                422: components["responses"]["UNPROCESSABLE_CONTENT"];
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        post?: never;
        /** Delete a class group */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    group_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/class-groups/by-class/{class_id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                class_id: string;
            };
            cookie?: never;
        };
        /** Get all classes in the same group as the given class */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    class_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Error: {
            /** @description Error code */
            code?: number;
            /** @description Error name */
            status?: string;
            /** @description Error message */
            message?: string;
            /** @description Errors */
            errors?: {
                [key: string]: unknown;
            };
        };
        PaginationMetadata: {
            total?: number;
            total_pages?: number;
            first_page?: number;
            last_page?: number;
            page?: number;
            previous_page?: number;
            next_page?: number;
        };
        ClassMini: {
            /** Format: uuid */
            id?: string;
            name?: string;
        };
        UserBase: {
            /** Format: uuid */
            readonly id?: string;
            name: string;
            /** Format: email */
            email: string;
            /** Format: date-time */
            readonly created_at?: string;
            /** Format: uuid */
            university_id?: string;
            readonly university?: string;
            readonly classes?: components["schemas"]["ClassMini"][];
            readonly class_count?: unknown;
        };
        UserCreate: {
            name: string;
            /** Format: email */
            email: string;
            password: string;
            /** Format: uuid */
            university_id: string;
        };
        UserUpdate: {
            name?: string;
            password?: string;
        };
        UserLogin: {
            /** Format: email */
            email: string;
            password: string;
        };
        TagMini: {
            /** Format: uuid */
            id?: string;
            name?: string;
        };
        Class: {
            /** Format: uuid */
            readonly id?: string;
            name: string;
            /** Format: uuid */
            readonly university_id?: string;
            readonly university?: string;
            /** Format: uuid */
            readonly class_group_id?: string;
            readonly class_group?: string;
            readonly discussion_count?: unknown;
            readonly enrolled_count?: unknown;
            readonly tags?: components["schemas"]["TagMini"][];
            readonly group_id?: unknown;
            readonly group_label?: unknown;
        };
        UserEnroll: {
            /** Format: uuid */
            class_id: string;
        };
        UserEnrollBulk: {
            class_ids: string[];
        };
        University: {
            /** Format: uuid */
            readonly id?: string;
            name: string;
            readonly users?: components["schemas"]["UserBase"][];
            readonly classes?: components["schemas"]["ClassMini"][];
            readonly user_count?: unknown;
            readonly class_count?: unknown;
        };
        UniversityCreate: {
            name: string;
        };
        UniversityUpdate: {
            name: string;
        };
        Reply: {
            /** Format: uuid */
            readonly id?: string;
            body: string;
            /** Format: date-time */
            readonly created_at?: string;
            /** Format: uuid */
            readonly discussion_id?: string;
            /** Format: uuid */
            readonly user_id?: string;
            readonly author?: string;
            readonly discussion_title?: string;
        };
        Discussion: {
            /** Format: uuid */
            readonly id?: string;
            title: string;
            body: string;
            /** Format: date-time */
            readonly created_at?: string;
            /** Format: uuid */
            readonly user_id?: string;
            /** Format: uuid */
            readonly class_id?: string;
            readonly author?: string;
            readonly class_name?: string;
            readonly university?: string;
            readonly replies?: components["schemas"]["Reply"][];
            readonly reply_count?: unknown;
        };
        DiscussionCreate: {
            title: string;
            body: string;
            /** Format: uuid */
            user_id: string;
            /** Format: uuid */
            class_id: string;
        };
        ReplyCreate: {
            body: string;
            /** Format: uuid */
            user_id: string;
            /** Format: uuid */
            discussion_id: string;
        };
        ReplyUpdate: {
            body: string;
        };
        ClassCreate: {
            name: string;
            /** Format: uuid */
            university_id: string;
            tag_ids?: string[];
        };
        ClassUpdate: {
            name?: string;
            tag_ids?: string[];
        };
        Tag: {
            /** Format: uuid */
            readonly id?: string;
            name: string;
            readonly class_count?: unknown;
        };
        TagCreate: {
            name: string;
        };
        TagUpdate: {
            name: string;
        };
        ClassGroup: {
            /** Format: uuid */
            readonly id?: string;
            name: string;
            label?: string;
            description?: string;
            readonly signature?: string;
            readonly classes?: components["schemas"]["Class"][];
            readonly class_count?: unknown;
        };
        ClassGroupCreate: {
            name: string;
            description?: string;
        };
        ClassGroupUpdate: {
            name?: string;
            description?: string;
        };
    };
    responses: {
        /** @description Default error response */
        DEFAULT_ERROR: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Unprocessable Content */
        UNPROCESSABLE_CONTENT: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
